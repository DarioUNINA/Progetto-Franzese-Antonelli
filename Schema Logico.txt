-PK
/ FK

-classi-

aree_tematiche (-nome_area-)
corsi (nome, descrizione, presenze_min, max_partetcipanti, -id_corso-, parole_chiave, terminato, /id_operatore/)
lezioni (durata, titolo, descrizione, data, orario, -id_lezione-, /id_corso/)
studenti (-matricola-, nome, cognome)
operatori (-id_operatore-, Password)


presenze (/matricola/, /id_lezione/)
iscrizioni (ammesso, /matricola/, /id_corso/)  //classe d'associazione
temi (/nome_area/, /id_corso/)

-vincoli-


1)se corso é terminato non é possibile aggiungere lezioni

2)ammesso é true se le presenze dello studente sono > presenze min

3)se gli iscritti a un corso sono = max partecipanti, non é possibile aggiungere altri studenti nella tabella iscrizione 

4)un operatore puó modificare solo i corsi di cui é titolare  *DA GESTIRE CON JDBC*

5)un operatore non puó tenere piú lezioni contemporaneamente *DA GESTIRE CON JDBC*

6)un corso non puó avere due lezioni contemporaneamente

7)unique (matricola, corso) in Iscrizione

8)uno studente non si puó iscrivere a due lezioni contemporaneamente

9)Non é possibile iscriversi a lezioni giá concluse

10)Non é possibile iscriversi due volte alla stessa lezione

11)Non ci si puó iscrivere a corsi terminati

12)Non è possibile iscriversi ad una lezione se non si è iscritti al corso.

13)Autoincremnto primary key

14)Minimo lunghezza password

15)domanda sicurezza nel caso dimentichi pass

1)
CREATE FUNCTION check_inserimento_in_terminato()
RETURNS TRIGGER AS
$$
DECLARE violazione INTEGER;
BEGIN
	SELECT COUNT (*) INTO violazione
	FROM corso s
	WHERE s.id_corso = NEW.id_corso AND s.terminato = true;
	
	IF (violazione>0) THEN
		DELETE FROM lezioni WHERE id_lezione = NEW.id_lezione;
		RAISE EXCEPTION ' ATTENZIONE : il corso e termianto';
	END IF;
	RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER inserimento_in_terminato
AFTER INSERT ON lezioni
FOR EACH ROW
EXECUTE PROCEDURE check_inserimento_in_terminato();



2)
	CREATE OR REPLACE FUNCTION check_ammissione()
	RETURNS TRIGGER AS 
	$$
	DECLARE p_min INTEGER;
			p_studente INTEGER;
			nome_corso VARCHAR(100);
	
	BEGIN
	
		SELECT l.id_corso INTO nome_corso
		FROM presenze p JOIN lezioni l ON p.id_lezione = l.id_lezione
		WHERE p.id_lezione = NEW.id_lezione;
	
		SELECT COUNT(*) INTO p_studente
		FROM presenze p JOIN lezioni l ON p.id_lezione = l.id_lezione
		WHERE p.matricola = NEW.matricola
		AND l.id_corso = nome_corso;
	
		SELECT presenze_min INTO p_min
		FROM corsi c
		WHERE c.id_corso = nome_corso;
	
		IF( p_studente >= p_min ) THEN
			UPDATE iscrizioni i SET ammesso = TRUE WHERE i.matricola = NEW.matricola AND i.id_corso =  nome_corso;
		END IF;
		RETURN NEW;
	
	END

	$$ LANGUAGE plpgsql;

	CREATE OR REPLACE TRIGGER ammissione
	AFTER INSERT ON presenze
	FOR EACH ROW
	EXECUTE PROCEDURE check_ammissione();

	

3)
	CREATE FUNCTION check_max_partecipanti()
	RETURNS TRIGGER AS
	$$
	DECLARE iscritti INTEGER;
			max_p INTEGER;
	BEGIN
		SELECT COUNT matricola INTO iscritti
		FROM iscrizioni i JOIN corsi c ON i.id_corso = c.id_corso
		WHERE i.id_corso = new.id_corso;
		
		SELECT max_partetcipanti INTO max_p
		FROM iscrizioni i JOIN corsi c ON i.id_corso = c.id_corso
		WHERE i.id_corso = NEW.id_corso;
		
		IF (iscritti > max_p) THEN	
			DELETE FROM iscrizioni i 
			WHERE i.matricola = NEW.matricola AND i.id_corso = NEW.id_corso;
			RAISE EXCEPTION 'e stato raggiunto il numero massimo di partecipanti al corso';
		END IF;
		RETURN NEW;
	END
	$$ LANGUAGE plpgsql;

	CREATE TRIGGER max_partetcipanti
	AFTER INSERT ON iscrizioni
	FOR EACH ROW
	EXECUTE PROCEDURE check_max_partecipanti();

6) ALTER TABLE lezioni 
   ADD CONSTRAINT lezioni_contemporanee UNIQUE (id_corso, orario, data)

7) ALTER TABLE iscrizioni
   ADD CONSTRAINT sincola_iscrizione UNIQUE (matricola, id_corso)
   
9)	CREATE OR REPLACE FUNCTION check_data_lezione()
	RETURNS TRIGGER AS
	$$
	DECLARE data_lezione DATE;
	BEGIN
		SELECT data INTO data_lezione
		FROM presenze p JOIN lezioni l ON p.id_lezione = l.id_lezione
		WHERE p.id_lezione = NEW.id_lezione;
		
		IF (data_lezione < CURRENT_DATE) THEN 
			DELETE FROM presenze p
			WHERE p.matricola = NEW.matricola AND p.id_lezione = NEW.id_lezione;
			RAISE EXCEPTION 'La lezione si e gia conclusa';
		END IF;
		RETURN NEW;
	END
	$$ LANGUAGE plpgsql;
	
	CREATE OR REPLACE TRIGGER data_lezioni
	AFTER INSERT ON presenze
	FOR EACH ROW
	EXECUTE PROCEDURE check_data_lezione();
	
	
10) ALTER TABLE presenze
	ADD CONSTRAINT unique_presenza UNIQUE (matricola, id_lezione)
	
8) CREATE FUNCTION check_lezioni_contemporanee()
	RETURNS TRIGGER AS
	$$
	DECLARE violazione INTEGER;
	BEGIN
		SELECT COUNT (*) INTO violazione
		FROM presenze p JOIN lezioni l ON p.id_lezione = l.id_lezione
		WHERE new.id_lezione = l.id_lezione AND l.orario IN (
		
		SELECT le.orario
		FROM presenze pr JOIN lezioni le ON pr.id_lezione = le.id_lezione
		WHERE pr.matricola = NEW.matricola AND le.data = l.data);
		
		
		IF (violazione > 0) THEN	
			DELETE FROM presenze p 
			WHERE p.matricola = new.matricola AND p.id_lezione = new.id_lezione;
			RAISE EXCEPTION 'Ti sei gia iscritto ad una lezione allo stesso orario';
		END IF;
		RETURN NEW;
	END
	$$ LANGUAGE plpgsql;
	
	CREATE TRIGGER lezioni_contemporanee
	AFTER INSERT ON presenze
	FOR EACH ROW
	EXECUTE PROCEDURE check_lezioni_contemporanee();
	
11)
	CREATE FUNCTION check_iscrizione_terminato()
	RETURNS TRIGGER AS
	$$
	DECLARE violazione INTEGER;
	BEGIN
		SELECT COUNT (*) INTO violazione 
		FROM corsi c JOIN iscrizioni i ON c.id_corso = i.id_corso
		WHERE i.id_corso = new.id_corso AND c.terminato = true;
		
		IF violazione > 0 THEN
		DELETE FROM iscrizioni i WHERE i.matricola = new.matricola AND i.id_corso = new.id_corso;
		RAISE EXCEPTION 'Il corso gia e terminato';
		END IF;
		RETURN NEW;
	END
	
	$$ LANGUAGE plpgsql;
	
	CREATE TRIGGER iscrizione_in_terminato
	AFTER INSERT ON iscrizioni
	FOR EACH ROW
	EXECUTE PROCEDURE check_iscrizione_terminato();

12) CREATE FUNCTION check_lezione_iscrizione()
	RETURNS TRIGGER AS
	$$
	DECLARE contatore INTEGER;
	BEGIN
		SELECT COUNT (*) INTO contatore
		FROM presenze p JOIN lezioni l ON p.id_lezione = l.id_lezione
		WHERE p.id_lezione = NEW.id_lezione AND l.id_corso IN (
		
		SELECT i.id_corso
		FROM iscrizioni i
		WHERE i.matricola = NEW.matricola);
		
		IF contatore = 0 THEN
			DELETE FROM presenze p WHERE p.matricola = NEW.matricola AND p.id_lezione = NEW.id_lezione;
			RAISE EXCEPTION 'Non sei iscritto al corso';
		END IF;
		RETURN NEW;
	END;
	
	$$ LANGUAGE plpgsql;
	
	CREATE TRIGGER lezione_iscrizione
	AFTER INSERT ON presenze
	FOR EACH ROW
	EXECUTE PROCEDURE check_lezione_iscrizione();
	
	
12)
	CREATE SEQUENCE sequenza_id_corso
	START 1
	INCREMENT 1
	OWNED BY corsi.id_corso;
	
	--insert into corsi values (nextval('sequenza_id_corso')
	
	CREATE SEQUENCE sequenza_id_operatore
	START 1
	INCREMENT 1
	OWNED BY operatori.id_operatore;
	
	CREATE SEQUENCE sequenza_nome_area
	START 1
	INCREMENT 1
	OWNED BY aree_tematiche.nome_area;
	
	CREATE SEQUENCE sequenza_id_lezione
	START 1
	INCREMENT 1
	OWNED BY lezioni.id_lezione;
	
	CREATE SEQUENCE sequenza_matricola
	START 1
	INCREMENT 1
	OWNED BY studenti.matricola;