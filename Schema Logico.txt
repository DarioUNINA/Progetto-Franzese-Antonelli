-PK
/ FK

aree_tematiche (-nome_area-)
corsi (nome, descrizione, presenze_min, max_partetcipanti, -id_corso-, parole_chiave, /id_operatore/)
lezioni (durata, titolo, descrizione, data, orario, -id_lezione-)
studenti (-matricola-, nome, cognome)
operatori (-id_operatore-, Password)

organizzazione (/id_lezione/, /id_corso/)
presenze (/matricola/, /id_lezione/)
iscrizioni (ammesso, /matricola/, /id_corso/)  //classe d'associazione
temi (/nome_area/, /id_corso/)


vincoli


se corso é terminato non é possibile aggiungere lezioni

ammesso é true se le presenze dello studente sono > presenze min

se gli iscritti a un corso sono = max partecipanti, non é possibile aggiungere altri studenti nella tabella iscrizione con idcorso = idcorso terminato

un operatore puó modificare solo i corsi di cui é titolare

un operatore non puó tenere piú lezioni contemporaneamente

un corso non puó avere due lezioni contemporaneamente

unique (matricola, corso) in Iscrizione

uno studente non si puó iscrivere a due lezioni contemporaneamente



CREATE FUNCTION check_inserimento_in_terminato()
RETURNS TRIGGER AS
$$
DECLARE violazione INTEGER;
BEGIN
	SELECT COUNT (*) INTO violazione
	FROM corso s
	WHERE s.id_corso = NEW.id_corso AND s.terminato = true;
	
	IF (violazione>0) THEN
		DELETE FROM lezioni WHERE id_lezione = NEW.id_lezione;
		RAISE EXCEPTION;
	END IF;
	RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER inserimento_in_terminato
AFTER INSERT ON lezioni
FOR EACH ROW
EXECUTE PROCEDURE check_inserimento_in_terminato();


CREATE FUNCTION check_ammesso()
RETURNS TRIGGER AS
$$
DECLARE presenze INTEGER;
BEGIN
	SELECT COUNT 
	FROM iscrizione i JOIN presenze p ON i.matricola = p.matricola JOIN lezioni l ON i.id_corso - l.id_corso
	WHERE p.matricola = new.matricola
	
	
	
	
		DELETE FROM lezioni WHERE id_lezione = NEW.id_lezione;
		RAISE NOTICE EXCEPTION;
	RETURN NEW;
END
$$ LANGUAGE plpgsql;